/*
 * Copyright (C) 2016 B3Partners B.V.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package nl.b3p.topnl;

import java.sql.SQLException;
import javax.sql.DataSource;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hsqldb.jdbc.JDBCDataSource;
import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.rules.TestName;

/**
 *
 * @author Meine Toonen meinetoonen@b3partners.nl
 */
public class TestUtil {
    
    protected final static Log log = LogFactory.getLog(TestUtil.class);
    protected DataSource datasource;
    
    
    @Rule 
    public TestName testName = new TestName();
    
    @Before
    public void setUpClass() throws SQLException {
        //BasicDataSource ds = new BasicDataSource();
       // ds.setUrl("jdbc:postgresql://localhost:5432/rsgb_topnl");
        //ds.setDriverClassName("org.hsqldb.jdbcDriver");
        //ds.setDriverClassName("org.postgresql.Driver");
        //ds.setUsername("rsgb");
        //ds.setPassword("rsgb");
         
        JDBCDataSource ds = new JDBCDataSource();
        String testname = testName.getMethodName();
        long randomizer = System.currentTimeMillis();
        ds.setUrl("jdbc:hsqldb:file:./target/unittest-hsqldb/"+ testname + "_" + randomizer +"/db;shutdown=true");
        datasource = ds;
        initDB();
    }
    
    @After
    public void after() throws SQLException{
    }
    
    private void initDB(){
        QueryRunner run = new QueryRunner(datasource);
        try {
            // Execute the SQL update statement and return the number of
            // inserts that were made
           /* int inserts = run.update("INSERT INTO Person (name,height) VALUES (?,?)",
                    "John Doe", 1.82);
            // The line before uses varargs and autoboxing to simplify the code

            // Now it's time to rise to the occation...
            int updates = run.update("UPDATE Person SET height=? WHERE name=?",
                    2.05, "John Doe");*/
         //  int a = run.update("create table hoogte(      id serial primary key,      identificatie text,      topnltype text,      brontype text,      bronactualiteit timestamp,      bronbeschrijving text,      bronnauwkeurigheid double precision,      objectBeginTijd timestamp,      objectEindTijd timestamp,      visualisatieCode integer,      typeHoogte text,      referentieVlak text,      hoogte double precision);");
           int a = run.update("create table hoogte(      id bigint generated by default as identity (start with 1),      "
                   + "identificatie varchar(255),      topnltype varchar(255),      brontype varchar(255),     "
                   + " bronactualiteit timestamp,      bronbeschrijving varchar(255),      bronnauwkeurigheid double precision,     "
                   + " objectBeginTijd timestamp,      objectEindTijd timestamp,      visualisatieCode bigint,      typeHoogte varchar(255),      "
                   + "referentieVlak varchar(255),      hoogte double precision,      primary key (id));");
           int b = 0;
            // So does the line above
        } catch (SQLException sqle) {
            log.error("Error initializing testdb:",sqle);
            // Handle it
        }

    }
}
